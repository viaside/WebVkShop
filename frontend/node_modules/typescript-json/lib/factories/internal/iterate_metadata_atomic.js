"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_atomic = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ArrayUtil_1 = require("../../utils/ArrayUtil");
var TypeFactory_1 = require("../TypeFactory");
var same = function (type) {
    if (type === null)
        return function () { return false; };
    return function (flag) { return (type.getFlags() & flag) !== 0; };
};
var iterate_metadata_atomic = function (checker) {
    return function (meta, type) {
        var filter = same(type);
        var check = function (info) {
            var _a;
            if (filter(info.atomic) ||
                filter(info.literal) ||
                (((_a = type.symbol) === null || _a === void 0 ? void 0 : _a.escapedName) === info.class.name &&
                    same(TypeFactory_1.TypeFactory.getReturnType(checker, type, "valueOf"))(info.atomic) &&
                    info.class.methods.every(function (method) {
                        return same(TypeFactory_1.TypeFactory.getReturnType(checker, type, method.name))(method.return);
                    }))) {
                ArrayUtil_1.ArrayUtil.add(meta.atomics, info.class.name.toLowerCase());
                return true;
            }
            return false;
        };
        return ATOMICS.some(function (info) { return check(info); });
    };
};
exports.iterate_metadata_atomic = iterate_metadata_atomic;
var ATOMICS = [
    {
        atomic: typescript_1.default.TypeFlags.BooleanLike,
        literal: typescript_1.default.TypeFlags.BooleanLiteral,
        class: {
            name: "Boolean",
            methods: [],
        },
    },
    {
        atomic: typescript_1.default.TypeFlags.NumberLike,
        literal: typescript_1.default.TypeFlags.NumberLiteral,
        class: {
            name: "Number",
            methods: [
                {
                    name: "toLocaleString",
                    return: typescript_1.default.TypeFlags.String,
                },
            ],
        },
    },
    {
        atomic: typescript_1.default.TypeFlags.BigInt,
        literal: typescript_1.default.TypeFlags.BigIntLiteral,
        class: {
            name: "BigInt",
            methods: [
                {
                    name: "toLocaleString",
                    return: typescript_1.default.TypeFlags.String,
                },
            ],
        },
    },
    {
        atomic: typescript_1.default.TypeFlags.StringLike,
        literal: typescript_1.default.TypeFlags.StringLiteral,
        class: {
            name: "String",
            methods: [
                {
                    name: "toLowerCase",
                    return: typescript_1.default.TypeFlags.String,
                },
            ],
        },
    },
];
//# sourceMappingURL=iterate_metadata_atomic.js.map