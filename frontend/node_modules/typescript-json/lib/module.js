"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createObject = exports.createIsClone = exports.createAssertClone = exports.createClone = exports.createIsStringify = exports.createAssertStringify = exports.createStringify = exports.createValidateEquals = exports.createEquals = exports.createAssertEquals = exports.createValidate = exports.createIs = exports.createAssertType = exports.createAssert = exports.application = exports.assertClone = exports.isClone = exports.clone = exports.isStringify = exports.assertStringify = exports.stringify = exports.validateEquals = exports.equals = exports.assertEquals = exports.validate = exports.is = exports.assertType = exports.assert = void 0;
var _every_1 = require("./functional/$every");
var _guard_1 = require("./functional/$guard");
var _is_email_1 = require("./functional/$is_email");
var _is_ipv4_1 = require("./functional/$is_ipv4");
var _is_ipv6_1 = require("./functional/$is_ipv6");
var _is_url_1 = require("./functional/$is_url");
var _is_uuid_1 = require("./functional/$is_uuid");
var _join_1 = require("./functional/$join");
var _number_1 = require("./functional/$number");
var _report_1 = require("./functional/$report");
var _string_1 = require("./functional/$string");
var _tail_1 = require("./functional/$tail");
var TypeGuardError_1 = require("./TypeGuardError");
__exportStar(require("./schemas/IJsonApplication"), exports);
__exportStar(require("./schemas/IJsonComponents"), exports);
__exportStar(require("./schemas/IJsonSchema"), exports);
__exportStar(require("./Primitive"), exports);
__exportStar(require("./TypeGuardError"), exports);
__exportStar(require("./IValidation"), exports);
function assert() {
    halt("assert");
}
exports.assert = assert;
(function (assert) {
    assert.is_uuid = _is_uuid_1.$is_uuid;
    assert.is_email = _is_email_1.$is_email;
    assert.is_url = _is_url_1.$is_url;
    assert.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assert.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assert.join = _join_1.$join;
    assert.every = _every_1.$every;
    assert.guard = (0, _guard_1.$guard)("TSON.assert");
})(assert = exports.assert || (exports.assert = {}));
function assertType() {
    halt("assertType");
}
exports.assertType = assertType;
(function (assertType) {
    function predicate(matched, exceptionable, closure) {
        if (matched === false && exceptionable === true)
            throw new TypeGuardError_1.TypeGuardError(__assign({ method: "TSON.assertType" }, closure()));
        return matched;
    }
    assertType.predicate = predicate;
})(assertType = exports.assertType || (exports.assertType = {}));
Object.assign(assertType, assert);
function is() {
    halt("is");
}
exports.is = is;
(function (is) {
    is.is_uuid = _is_uuid_1.$is_uuid;
    is.is_email = _is_email_1.$is_email;
    is.is_url = _is_url_1.$is_url;
    is.is_ipv4 = _is_ipv4_1.$is_ipv4;
    is.is_ipv6 = _is_ipv6_1.$is_ipv6;
})(is = exports.is || (exports.is = {}));
function validate() {
    halt("validate");
}
exports.validate = validate;
(function (validate) {
    validate.is_uuid = _is_uuid_1.$is_uuid;
    validate.is_email = _is_email_1.$is_email;
    validate.is_url = _is_url_1.$is_url;
    validate.is_ipv4 = _is_ipv4_1.$is_ipv4;
    validate.is_ipv6 = _is_ipv6_1.$is_ipv6;
    validate.join = _join_1.$join;
    validate.report = _report_1.$report;
    validate.predicate = function (res) {
        return function (matched, exceptionable, closure) {
            if (matched === false && exceptionable === true)
                (function () {
                    res.success && (res.success = false);
                    var errorList = res.errors;
                    var error = closure();
                    if (errorList.length) {
                        var last = errorList[errorList.length - 1].path;
                        if (last.length >= error.path.length &&
                            last.substring(0, error.path.length) === error.path)
                            return;
                    }
                    errorList.push(error);
                    return;
                })();
            return matched;
        };
    };
})(validate = exports.validate || (exports.validate = {}));
function assertEquals() {
    halt("assertEquals");
}
exports.assertEquals = assertEquals;
(function (assertEquals) {
    assertEquals.is_uuid = _is_uuid_1.$is_uuid;
    assertEquals.is_email = _is_email_1.$is_email;
    assertEquals.is_url = _is_url_1.$is_url;
    assertEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertEquals.join = _join_1.$join;
    assertEquals.every = _every_1.$every;
    assertEquals.guard = (0, _guard_1.$guard)("TSON.assertEquals");
    function predicate(matched, exceptionable, closure) {
        if (matched === false && exceptionable === true)
            throw new TypeGuardError_1.TypeGuardError(__assign({ method: "TSON.assertEquals" }, closure()));
        return matched;
    }
    assertEquals.predicate = predicate;
})(assertEquals = exports.assertEquals || (exports.assertEquals = {}));
function equals() {
    halt("equals");
}
exports.equals = equals;
(function (equals) {
    equals.is_uuid = _is_uuid_1.$is_uuid;
    equals.is_email = _is_email_1.$is_email;
    equals.is_url = _is_url_1.$is_url;
    equals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    equals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    equals.join = _join_1.$join;
})(equals = exports.equals || (exports.equals = {}));
function validateEquals() {
    halt("validateEquals");
}
exports.validateEquals = validateEquals;
(function (validateEquals) {
    validateEquals.is_uuid = _is_uuid_1.$is_uuid;
    validateEquals.is_email = _is_email_1.$is_email;
    validateEquals.is_url = _is_url_1.$is_url;
    validateEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    validateEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    validateEquals.join = _join_1.$join;
    validateEquals.report = validate.report;
    validateEquals.predicate = function (res) {
        return function (matched, exceptionable, closure) {
            if (matched === false && exceptionable === true)
                (function () {
                    res.success && (res.success = false);
                    var errorList = res.errors;
                    var error = closure();
                    if (errorList.length) {
                        var last = errorList[errorList.length - 1].path;
                        if (last.length >= error.path.length &&
                            last.substring(0, error.path.length) === error.path)
                            return;
                    }
                    errorList.push(error);
                    return;
                })();
            return matched;
        };
    };
})(validateEquals = exports.validateEquals || (exports.validateEquals = {}));
function stringify() {
    halt("stringify");
}
exports.stringify = stringify;
(function (stringify) {
    stringify.number = _number_1.$number;
    stringify.string = _string_1.$string;
    stringify.tail = _tail_1.$tail;
    function throws(props) {
        throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "TSON.stringify" }));
    }
    stringify.throws = throws;
})(stringify = exports.stringify || (exports.stringify = {}));
function assertStringify() {
    halt("assertStringify");
}
exports.assertStringify = assertStringify;
(function (assertStringify) {
    assertStringify.is_uuid = _is_uuid_1.$is_uuid;
    assertStringify.is_email = _is_email_1.$is_email;
    assertStringify.is_url = _is_url_1.$is_url;
    assertStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertStringify.number = _number_1.$number;
    assertStringify.string = _string_1.$string;
    assertStringify.tail = _tail_1.$tail;
    assertStringify.join = _join_1.$join;
    assertStringify.guard = (0, _guard_1.$guard)("TSON.assertStringify");
    assertStringify.every = _every_1.$every;
    assertStringify.throws = function () { };
    function predicate(matched, exceptionable, closure) {
        if (matched === false && exceptionable === true)
            throw new TypeGuardError_1.TypeGuardError(__assign({ method: "TSON.assertStringify" }, closure()));
        return matched;
    }
    assertStringify.predicate = predicate;
})(assertStringify = exports.assertStringify || (exports.assertStringify = {}));
function isStringify() {
    halt("isStringify");
}
exports.isStringify = isStringify;
(function (isStringify) {
    isStringify.is_uuid = _is_uuid_1.$is_uuid;
    isStringify.is_email = _is_email_1.$is_email;
    isStringify.is_url = _is_url_1.$is_url;
    isStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    isStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    isStringify.number = _number_1.$number;
    isStringify.string = _string_1.$string;
    isStringify.tail = _tail_1.$tail;
    isStringify.throws = function () { };
})(isStringify = exports.isStringify || (exports.isStringify = {}));
function clone() {
    halt("clone");
}
exports.clone = clone;
(function (clone) {
    clone.number = _number_1.$number;
    clone.string = _string_1.$string;
    clone.tail = _tail_1.$tail;
    function throws(props) {
        throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "TSON.clone" }));
    }
    clone.throws = throws;
})(clone = exports.clone || (exports.clone = {}));
function isClone() {
    halt("isClone");
}
exports.isClone = isClone;
(function (isClone) {
    isClone.is_uuid = _is_uuid_1.$is_uuid;
    isClone.is_email = _is_email_1.$is_email;
    isClone.is_url = _is_url_1.$is_url;
    isClone.is_ipv4 = _is_ipv4_1.$is_ipv4;
    isClone.is_ipv6 = _is_ipv6_1.$is_ipv6;
    isClone.number = _number_1.$number;
    isClone.string = _string_1.$string;
    isClone.tail = _tail_1.$tail;
    isClone.throws = function () { };
})(isClone = exports.isClone || (exports.isClone = {}));
function assertClone() {
    halt("assertClone");
}
exports.assertClone = assertClone;
(function (assertClone) {
    assertClone.is_uuid = _is_uuid_1.$is_uuid;
    assertClone.is_email = _is_email_1.$is_email;
    assertClone.is_url = _is_url_1.$is_url;
    assertClone.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertClone.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertClone.number = _number_1.$number;
    assertClone.string = _string_1.$string;
    assertClone.tail = _tail_1.$tail;
    assertClone.join = _join_1.$join;
    assertClone.guard = (0, _guard_1.$guard)("TSON.assertClone");
    assertClone.every = _every_1.$every;
    assertClone.throws = function () { };
})(assertClone = exports.assertClone || (exports.assertClone = {}));
function application() {
    halt("application");
}
exports.application = application;
function createAssert() {
    halt("createAssert");
}
exports.createAssert = createAssert;
Object.assign(createAssert, assert);
function createAssertType() {
    halt("createAssertType");
}
exports.createAssertType = createAssertType;
Object.assign(createAssertType, assertType);
function createIs() {
    halt("createIs");
}
exports.createIs = createIs;
Object.assign(createIs, is);
function createValidate() {
    halt("createValidate");
}
exports.createValidate = createValidate;
Object.assign(createValidate, validate);
function createAssertEquals() {
    halt("createAssertEquals");
}
exports.createAssertEquals = createAssertEquals;
Object.assign(createAssertEquals, assertEquals);
function createEquals() {
    halt("createEquals");
}
exports.createEquals = createEquals;
Object.assign(createEquals, equals);
function createValidateEquals() {
    halt("createValidateEquals");
}
exports.createValidateEquals = createValidateEquals;
Object.assign(createValidateEquals, validateEquals);
function createStringify() {
    halt("createStringify");
}
exports.createStringify = createStringify;
Object.assign(createStringify, stringify);
function createAssertStringify() {
    halt("createAssertStringify");
}
exports.createAssertStringify = createAssertStringify;
Object.assign(createAssertStringify, assertStringify);
function createIsStringify() {
    halt("createIsStringify");
}
exports.createIsStringify = createIsStringify;
Object.assign(createIsStringify, isStringify);
function createClone() {
    halt("createClone");
}
exports.createClone = createClone;
Object.assign(createClone, clone);
function createAssertClone() {
    halt("createAssertClone");
}
exports.createAssertClone = createAssertClone;
Object.assign(createAssertClone, assertClone);
function createIsClone() {
    halt("createIsClone");
}
exports.createIsClone = createIsClone;
Object.assign(createIsClone, isClone);
function createObject() {
    halt("createObject");
}
exports.createObject = createObject;
function halt(name) {
    throw new Error("Error on TSON.".concat(name, "(): no transform has been configured. Configure the \"tsconfig.json\" file following the [README.md#setup](https://github.com/samchon/typescript-json#setup)"));
}
//# sourceMappingURL=module.js.map