{"ast":null,"code":"import { useRef, useState, useCallback, useEffect } from 'react';\nimport EmblaCarousel from 'embla-carousel';\nfunction canUseDOM() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}\nfunction sortAndMapPluginToOptions(plugins) {\n  return plugins.concat().sort(function (a, b) {\n    return a.name > b.name ? 1 : -1;\n  }).map(function (plugin) {\n    return plugin.options;\n  });\n}\nfunction arePluginsEqual(pluginsA, pluginsB) {\n  if (pluginsA.length !== pluginsB.length) return false;\n  var areEqual = EmblaCarousel.optionsHandler().areEqual;\n  var optionsA = sortAndMapPluginToOptions(pluginsA);\n  var optionsB = sortAndMapPluginToOptions(pluginsB);\n  return optionsA.every(function (optionA, index) {\n    var optionB = optionsB[index];\n    return areEqual(optionA, optionB);\n  });\n}\nfunction useEmblaCarousel(options, plugins) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (plugins === void 0) {\n    plugins = [];\n  }\n  var optionsHandler = useRef(EmblaCarousel.optionsHandler());\n  var storedOptions = useRef(options);\n  var storedPlugins = useRef(plugins);\n  var _a = useState(),\n    embla = _a[0],\n    setEmbla = _a[1];\n  var _b = useState(),\n    viewport = _b[0],\n    setViewport = _b[1];\n  var reInit = useCallback(function () {\n    if (embla) embla.reInit(storedOptions.current, storedPlugins.current);\n  }, [embla]);\n  useEffect(function () {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions;\n      var newEmbla_1 = EmblaCarousel(viewport, storedOptions.current, storedPlugins.current);\n      setEmbla(newEmbla_1);\n      return function () {\n        return newEmbla_1.destroy();\n      };\n    } else {\n      setEmbla(undefined);\n    }\n  }, [viewport, setEmbla]);\n  useEffect(function () {\n    if (optionsHandler.current.areEqual(storedOptions.current, options)) return;\n    storedOptions.current = options;\n    reInit();\n  }, [options, reInit]);\n  useEffect(function () {\n    if (arePluginsEqual(storedPlugins.current, plugins)) return;\n    storedPlugins.current = plugins;\n    reInit();\n  }, [plugins, reInit]);\n  return [setViewport, embla];\n}\nuseEmblaCarousel.globalOptions = undefined;\nexport { useEmblaCarousel as default };","map":{"version":3,"sources":["src/components/utils.ts","src/components/index.ts"],"names":["canUseDOM","window","document","createElement","sortAndMapPluginToOptions","plugins","concat","sort","a","b","name","map","plugin","options","pluginsA","pluginsB","length","EmblaCarousel","optionsHandler","optionsA","optionsB","every","optionA","index","optionB","areEqual","useEmblaCarousel","useRef","storedOptions","storedPlugins","embla","setEmbla","useState","viewport","setViewport","reInit","useCallback","current","useEffect","globalOptions","newEmbla_1","destroy","undefined","arePluginsEqual"],"mappings":"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","sourcesContent":["import EmblaCarousel, { EmblaPluginType } from 'embla-carousel'\n\nexport function canUseDOM(): boolean {\n  return !!(\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement\n  )\n}\n\nexport function sortAndMapPluginToOptions(\n  plugins: EmblaPluginType[],\n): EmblaPluginType['options'][] {\n  return plugins\n    .concat()\n    .sort((a, b) => (a.name > b.name ? 1 : -1))\n    .map((plugin) => plugin.options)\n}\n\nexport function arePluginsEqual(\n  pluginsA: EmblaPluginType[],\n  pluginsB: EmblaPluginType[],\n): boolean {\n  if (pluginsA.length !== pluginsB.length) return false\n\n  const { areEqual } = EmblaCarousel.optionsHandler()\n  const optionsA = sortAndMapPluginToOptions(pluginsA)\n  const optionsB = sortAndMapPluginToOptions(pluginsB)\n\n  return optionsA.every((optionA, index) => {\n    const optionB = optionsB[index]\n    return areEqual(optionA, optionB)\n  })\n}\n","import { useRef, useEffect, useState, useCallback } from 'react'\nimport { arePluginsEqual, canUseDOM } from './utils'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaOptionsType,\n  EmblaPluginType,\n} from 'embla-carousel'\n\ntype EmblaViewportRefType = <ViewportElement extends HTMLElement>(\n  instance: ViewportElement | null,\n) => void\n\nexport type UseEmblaCarouselType = [\n  EmblaViewportRefType,\n  EmblaCarouselType | undefined,\n]\n\nfunction useEmblaCarousel(\n  options: EmblaOptionsType = {},\n  plugins: EmblaPluginType[] = [],\n): UseEmblaCarouselType {\n  const optionsHandler = useRef(EmblaCarousel.optionsHandler())\n  const storedOptions = useRef(options)\n  const storedPlugins = useRef(plugins)\n  const [embla, setEmbla] = useState<EmblaCarouselType>()\n  const [viewport, setViewport] = useState<HTMLElement>()\n\n  const reInit = useCallback(() => {\n    if (embla) embla.reInit(storedOptions.current, storedPlugins.current)\n  }, [embla])\n\n  useEffect(() => {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions\n      const newEmbla = EmblaCarousel(\n        viewport,\n        storedOptions.current,\n        storedPlugins.current,\n      )\n      setEmbla(newEmbla)\n      return () => newEmbla.destroy()\n    } else {\n      setEmbla(undefined)\n    }\n  }, [viewport, setEmbla])\n\n  useEffect(() => {\n    if (optionsHandler.current.areEqual(storedOptions.current, options)) return\n\n    storedOptions.current = options\n    reInit()\n  }, [options, reInit])\n\n  useEffect(() => {\n    if (arePluginsEqual(storedPlugins.current, plugins)) return\n\n    storedPlugins.current = plugins\n    reInit()\n  }, [plugins, reInit])\n\n  return [<EmblaViewportRefType>setViewport, embla]\n}\n\nuseEmblaCarousel.globalOptions = <EmblaOptionsType | undefined>undefined\n\nexport default useEmblaCarousel\n"]},"metadata":{},"sourceType":"module"}